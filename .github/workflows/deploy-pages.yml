# .github/workflows/deploy-pages.yml

name: Build, Commit, and Deploy to GitHub Pages

on:
  # Run on pushes to the 'main' branch
  push:
    branches:
      - main

  # Allow you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # (Optional) Run on a schedule (e.g., once a day at 6:00 UTC)
  # schedule:
  #   - cron: '0 6 * * *'
  schedule:
    - cron: '0 6 * * *'    # Run at 6:00 AM UTC
    - cron: '0 18 * * *'   # Run at 6:00 PM UTC (18:00 in 24-hour format)
    #- cron: '*/5 * * * *' # Run on a 5-minute schedule for testing

# Set permissions for the GITHUB_TOKEN
permissions:
  contents: write  # To allow committing back to the repo
  pages: write     # To allow deployment to Pages
  id-token: write  # To allow deployment to Pages

# Allow only one concurrent deployment, cancel older runs
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-commit-and-deploy:

    # This 'if' statement is CRITICAL
    # It prevents the workflow from looping by checking if its own
    # commit message triggered this run.
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]'))

    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found, skipping."
          fi

      - name: Run Python scripts
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: |
          # Run the scripts inside the folder
          python extract_locations_gemini.py
          python create_caption_files.py
          python convert_json2js.py

      - name: Commit and Push Changes
        run: |
          # Configure Git user
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Add the specific files or folders that your scripts generate.
          # Use 'git add path/to/your/file.json' for single files
          # Use 'git add path/to/your/folder/' for entire folders
          # git add .  # <-- Avoid this, be specific!

          echo "Staging generated files for commit..."
          git add ./gallery-dl/
          git add ./web/

          # Now, check if anything was actually staged
          if [ -z "$(git diff --staged)" ]; then
            echo "No changes to commit."
          else
            echo "Changes detected, committing and pushing..."
            # The commit message includes [skip ci] to prevent this push
            # from triggering the workflow again (which would cause a loop).
            git commit -m "Automated data update [skip ci]"
            git push
          fi

      - name: Prepare Site Artifact
        run: |
          # Create directory to deploy from
          mkdir -p _site

          # This step copies all necessary website files into the '_site' directory.
          # It assumes your site files (html, css, etc.) and the files
          # generated by your scripts are all in the root directory.

          echo "Copying website files to _site directory..."
          shopt -s nullglob # Prevents errors if no files match a pattern

          # 1. Copy your main website files from the web folder.
          # This copies the *contents* (index.html, style.css, etc.)
          # to be the root of the '_site' directory.
          echo "Copying main site files from ./web/"
          cp -rf ./web/* _site/

          # --- NEW CODE BLOCK TO ADD TIMESTAMP ---
           echo "Injecting 'Last updated' timestamp overlay..."

          # Get the current date and time (UTC)
           LAST_UPDATED_STRING=$(date -u +"%A, %B %d, %Y at %I:%M %p UTC")

          # Create the HTML snippet for the small, light-gray note
          # We use single-quotes for the HTML attributes.
          HTML_SNIPPET="<div class='p-2 bg-light text-dark rounded shadow-sm' style='position:fixed; bottom:10px; left:50%; transform:translateX(-50%); z-index:999; font-size: 0.75rem;'>Last updated: $LAST_UPDATED_STRING</div>"

          # Use 'sed' to find the line with </body> and insert the snippet *before* it.
          sed -i '/<\/body>/i '"$HTML_SNIPPET" _site/index.html

          echo "Timestamp injected successfully."
          # --- END OF NEW CODE BLOCK --

          # Remove files you don't want deployed (like the workflow file itself)
          rm -rf _site/.github
          rm -rf _site/_site # Just in case

          echo "Artifact directory contents:"
          ls -lR _site

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
